create an HTML file that displays 2 input boxes called "filename" and "input" respectively, and, displays 5 output boxes called "output", "probe A", "probe B", "probe C" and "errors", respectively, and, write a command-line python loop program that receives inputs from the input boxes whenever any input box is changed and sends strings to the output boxes

---

write a command-line node.js loop program that receives inputs from the input boxes whenever any input box is changed and sends strings to the output boxes

---

I get an error "Cannot GET /" when I open a web browser on http://localhost:3000

---

make the output boxes 5 lines long and scrollable

---------

I get an error "ModuleNotFoundError: No module named 'websockets'" when I run "python3 server.py"

---
---
---

Create an HTML program that contains one textarea and creates a websocket. Every time the textarea is changed, the program sends the new contents of the textarea to the websocket as a pair of strings. The first string is the name of the textarea, the second string is the updated contents. Then, create a Python program that listens for updates from the websocket.

---

add a button to the html side called "go", when pushed it sends a pair of strings to the websocket, the first string is the id of the button and the second string is the empty string

---

to this add a readonly text area that is updated when the python server sends a pair of strings, the first string is the name of the readonly text area and the second string is the new contents of the text area

---
---
---

write Python code that runs 2 coroutines forever, routine 1 checks whether a file has been modified, routine 2 communicates with a websocket. Routine 1 calls "rerun" whenever the checked file has been modified, and routine 2 calls the same "rerun" whenever it notices a pattern in the incoming messages from the websocket. "Rerun" produces text output that it sends to the websocket.

---
---
---

Write Python code that runs 2 coroutines forever and serves 2 websockets.

Routine 1 checks whether a file has been modified and calls a function that sends a message to websocket 1 when the file has changed.

Routine 2 responds to messages from websocket 2 by calling a function that sends a message to websocket 2.

---
---
---

Write Python code that has a main routine called `repl`.

Repl creates and opens two websockets called `to_gui` and `from_gui`, at 'ws://localhost:8765' and 'ws://localhost:8766' respectively.
There are 2 coroutines called `gui` and `file_watcher`, respectively. Use create_task.
A global variable, the file being watched, called `file_being_watched`, is set to `test.drawio`.
The code imports the function `compile_and_run` from Python module `compile_and_run.py`.
The function `compile_and_run` takes 2 parameters. The first is a string which is the name of the file being watched. The second is a string derived from `from_gui.input` if `from_gui.input` exists else the empty string.
When calling `compile_and_run` check that `from_gui.input` exists, else use the empty string.
The function `compile_and_run` returns a dict.
The coroutine `gui` waits for JSON input from the `from_gui` websocket, then saves the parsed input into a global variable called `input_from_gui`, and, if input_from_gui.input exists and if the last character of input_from_gui.input is a newline, it calls `compile_and_run` with appropriate parameters, as above, and sends the resulting dict, as a single JSON object, to the `to_gui` websocket.
The coroutine `file_watcher` checks the modification time of the file `test.drawio` every 0.02 seconds. When the file is modified, `file_watcher` calls  `compile_and_run` with appropriate parameters as above  and sends the resulting dict, as a single JSON object, to the `to_gui` websocket.
The coroutine  and sends the resulting dict, as a single JSON object, to the `to_gui` websocket.
Insert this prompt, paraphrased, as a comment at the top of the program.

